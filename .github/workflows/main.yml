name: Deploy Flask Backend to Azure

env:
  AZURE_WEBAPP_NAME: sarada
  PYTHON_VERSION: '3.13'  # Match Azure's Python version

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Prepare deployment package
        run: |
          mkdir -p deploy_package
          cp -r backend/* deploy_package/
          
          # Create requirements.txt with explicit dependencies including compatible Werkzeug
          cat > deploy_package/requirements.txt << 'EOF'
          flask==2.0.1
          flask_cors==3.0.10
          gunicorn==20.1.0
          Werkzeug==2.2.3  # Pin Werkzeug to a compatible version
          EOF
          
          # Create startup.sh script
          cat > deploy_package/startup.sh << 'EOF'
          #!/bin/bash
          
          # Install dependencies from updated requirements.txt
          pip install -r requirements.txt
          
          # Initialize the database if needed
          # Check if database file exists before initializing
          if [ ! -f "/home/site/wwwroot/database.db" ]; then
              echo "Database not found, initializing..."
              python init_db.py
          else
              echo "Database already exists."
          fi
          
          # Start the app with gunicorn
          echo "Starting Gunicorn..."
          gunicorn --bind=0.0.0.0:8000 --timeout 600 app:app
          EOF
          
          chmod +x deploy_package/startup.sh
      
      - name: Deploy to Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: './deploy_package'
