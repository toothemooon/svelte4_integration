name: Deploy Flask Backend with Persistent DB to Azure

env:
  AZURE_WEBAPP_NAME: sarada
  PYTHON_VERSION: '3.13'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn
      
      - name: Prepare deployment package
        run: |
          mkdir -p deploy_package
          cp -r backend/* deploy_package/
          cp -r test_vercel_azure/* deploy_package/
          
          # Ensure the CORRECT requirements.txt with pinned versions
          cat > deploy_package/requirements.txt << 'EOF'
          flask==2.0.1
          flask_cors==3.0.10
          gunicorn==20.1.0
          Werkzeug==2.0.1
          EOF

          # Create a modified startup.sh script that preserves the database
          cat > deploy_package/startup.sh << 'EOF'
          #!/bin/bash
          
          # Enable tracing
          set -x
          
          # Install dependencies if needed
          pip install -r requirements.txt
          
          # Important: Make the database directory persistent
          DB_DIR="/home/site/wwwroot"
          export DATABASE_DIR="$DB_DIR"
          
          # Initialize the database ONLY if it doesn't exist yet
          if [ ! -f "$DB_DIR/database.db" ]; then
              echo "Database not found, initializing..."
              python init_db.py
          else
              echo "Database already exists at $DB_DIR/database.db"
              # Check to see if we have any comments
              sqlite3 $DB_DIR/database.db "SELECT COUNT(*) FROM comments"
          fi
          
          # Start the app with gunicorn using Azure's PORT variable
          echo "Starting Gunicorn..."
          gunicorn --bind=0.0.0.0:$PORT --timeout 600 app:app
          EOF
          
          chmod +x deploy_package/startup.sh
      
      - name: Deploy to Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: './deploy_package'
          
      - name: Post-deployment verification
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          curl -i https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health 